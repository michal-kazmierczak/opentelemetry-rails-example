version: "3.9"

services:

  # monitored services

  ## an init service to migrate (and create, if needed) the database
  init_database:
    build: rails_app
    environment:
      - SERVICE_NAME=init_database
    command: /rails/init_db.sh
    env_file:
      - .env_rails
    depends_on:
      - postgres
      - promtail

  ## HTTP service - Rails app
  web_app:
    build: rails_app
    environment:
      - SERVICE_NAME=web_app
    ports:
      - "3000:3000"
    env_file:
      - .env_rails
    depends_on:
      init_database:
        condition: service_completed_successfully

  ## async processing - Sidekiq app
  async_processing_app:
    build: rails_app
    command: bundle exec sidekiq -C config/sidekiq.yml
    environment:
      - SERVICE_NAME=async_processing_app
    env_file:
      - .env_rails
    depends_on:
      init_database:
        condition: service_completed_successfully

  postgres:
    image: postgres:16
    environment:
      - POSTGRES_PASSWORD=postgres
    volumes:
      - ./volumes/postgres:/var/lib/postgresql/data:rw
    depends_on:
      - promtail

  redis:
    image: redis:7
    volumes:
      - ./volumes/redis:/data:rw
    depends_on:
      - promtail

  # monitoring services

  grafana:
    image: grafana/grafana:11.2.1
    volumes:
      - ./volumes/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./volumes/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    ports:
      - "3001:3000"

  ## logging
  promtail:
    image: grafana/promtail:3.2.0
    volumes:
      - ./volumes/promtail/promtail-local-config.yaml:/etc/promtail/config.yaml:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yaml

  loki:
    image: grafana/loki:3.2.0
    command: [ "-config.file=/etc/loki/config.yaml" ]
    volumes:
      - ./volumes/loki/config.yaml:/etc/loki/config.yaml
    ports:
      - "3100:3100"
    depends_on:
      - minio

  ## tracing
  otelcol:
    image: otel/opentelemetry-collector-contrib:0.111.0
    command: [ "--config=/etc/otelcol-config.yml" ]
    volumes:
      - ./volumes/opentelemetry-collector/otelcol-config.yml:/etc/otelcol-config.yml
    depends_on:
      - tempo

  tempo:
    image: grafana/tempo:2.6.0
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./volumes/tempo/tempo.yaml:/etc/tempo.yaml
      - ./volumes/tempo/data:/tmp/tempo
    ports:
      - "3200:3200"   # tempo metrics
      - "4318:4318"  # otlp http
    depends_on:
      - minio

  ## metrics
  statsd-exporter:
    image: prom/statsd-exporter:v0.27.1
    command: "--statsd.mapping-config=/tmp/statsd_mapping.yml"
    volumes:
      - ./volumes/statsd-exporter:/tmp:ro

  prometheus:
    image: prom/prometheus:v2.54.1
    command: --config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/prometheus --storage.tsdb.retention.time=30d
    ports:
      - "9090"
    volumes:
      - ./volumes/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro

  ## general purpose object storage
  minio:
    image: minio/minio:RELEASE.2024-09-22T00-33-43Z
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        mkdir -p /data/tempo-data && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    volumes:
      - ./volumes/minio:/data
